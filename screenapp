import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Button, Alert } from 'react-native';
import * as Location from 'expo-location';

const VoiceRecognitionScreen = () => {
  const [location, setLocation] = useState(null);
  const [recognition, setRecognition] = useState(null);
  const [isListening, setIsListening] = useState(false);

  useEffect(() => {
    // Request location permissions
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Denied', 'Location permissions are required for this app to function.');
        return;
      }

      let loc = await Location.getCurrentPositionAsync({});
      setLocation(loc.coords);
    })();

    // Initialize Speech Recognition
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
      alert('Speech Recognition not supported. Use Chrome or Edge.');
    } else {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      recognitionInstance.lang = 'en-US';
      recognitionInstance.interimResults = true; // Allow interim results to detect early matches

      recognitionInstance.onresult = (event) => {
        const transcript = event.results[0][0].transcript.trim().toLowerCase();
        console.log(Detected phrase: ${transcript});

        // Automatically trigger alert if "help me" is detected anywhere in the sentence
        if (transcript.includes("help me")) {
          console.log('Help Me detected!');
          sendEmergencyAlert();  // Send the alert automatically
        }
      };

      recognitionInstance.onerror = (event) => {
        console.error('Speech Recognition Error:', event.error);
        Alert.alert('Error', 'Speech recognition error occurred. Try again.');
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
        // Restart the listening to continuously listen
        if (isListening) {
          recognitionInstance.start();
        }
      };

      setRecognition(recognitionInstance);
    }
  }, [isListening]);

  // Start listening for the phrase
  const startListening = () => {
    if (recognition) {
      setIsListening(true);
      recognition.start();
      console.log('Listening for "help me"...');
    } else {
      Alert.alert('Error', 'Speech recognition is not initialized.');
    }
  };

  // Stop listening
  const stopListening = () => {
    if (recognition) {
      recognition.stop();
      setIsListening(false);
      console.log('Stopped listening.');
    }
  };

  // Function to send the emergency alert
  const sendEmergencyAlert = async () => {
    const TWILIO_ACCOUNT_SID = 'ACf00fbc73f79d55eba225dc40d14abd3e'; // Replace with your SID
    const TWILIO_AUTH_TOKEN = '7ee0e70afd067ccce8709d62680e26c2'; // Replace with your Auth Token
    const TWILIO_PHONE_NUMBER = '+14067197660'; // Replace with your Twilio number
    const EMERGENCY_CONTACT = '+919455605482'; // Replace with a valid emergency contact

    if (!location) {
      Alert.alert('Error', 'Location is not available.');
      return;
    }

    console.log('Preparing to send emergency alert...'); // Log before API call

    const smsUrl = https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Messages.json;
    const callUrl = 'http://demo.twilio.com/docs/voice.xml';

    const smsData = new URLSearchParams({
      From: TWILIO_PHONE_NUMBER,
      To: EMERGENCY_CONTACT,
      Body: Help! I am in danger!\nLocation: ${location.latitude}, ${location.longitude}\nGoogle Maps Link: https://www.google.com/maps?q=${location.latitude},${location.longitude},
    });

    const auth = btoa(${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN});

    try {
      console.log('Sending SMS...');  // Log before sending SMS

      // Send SMS
      const smsResponse = await fetch(smsUrl, {
        method: 'POST',
        body: smsData,
        headers: {
          Authorization: Basic ${auth},
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });

      console.log('SMS Response Status:', smsResponse.status); // Log the response status
      const smsResult = await smsResponse.json();
      console.log('SMS Response:', smsResult); // Log the actual response from Twilio

      if (!smsResponse.ok) throw new Error(smsResult.message);

      // Make a call
      console.log('Making a call...');
      const callData = new URLSearchParams({
        From: TWILIO_PHONE_NUMBER,
        To: EMERGENCY_CONTACT,
        Url: callUrl,
      });

      const callResponse = await fetch(
        https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Calls.json,
        {
          method: 'POST',
          body: callData,
          headers: {
            Authorization: Basic ${auth},
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        }
      );

      const callResult = await callResponse.json();
      console.log('Call Response:', callResult);

      if (!callResponse.ok) throw new Error(callResult.message);
      Alert.alert('Alert Sent', 'Emergency message and call sent successfully!');
    } catch (error) {
      console.error('Error sending alert:', error);
      Alert.alert('Error', Failed to send emergency alert: ${error.message});
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>SafeHer</Text>
      <Button title={isListening ? 'Stop Listening' : 'Start Listening'} onPress={isListening ? stopListening : startListening} />
      <Button title="Send Emergency Alert (Help Me)" onPress={sendEmergencyAlert} />
      <Text style={styles.location}>
        {location
          ? Current Location: ${location.latitude}, ${location.longitude}
          : 'Fetching location...'}
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  location: {
    marginTop: 20,
    fontSize: 16,
    color: 'gray',
  },
});

export default VoiceRecognitionScreen;


in this change the ui to import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert, TouchableOpacity, ScrollView, Vibration } from 'react-native';
import * as Location from 'expo-location';
import AsyncStorage from '@react-native-async-storage/async-storage'; // Import AsyncStorage

const VoiceRecognitionScreen = () => {
  // Twilio credentials and emergency contact
  const TWILIO_ACCOUNT_SID = 'AC4a8ba7d7398f5f1cfb44d1dea0b32225'; // Replace with your SID
  const TWILIO_AUTH_TOKEN = '826e0e00fb4bb2fb84430fce4215630a'; // Replace with your Auth Token
  const TWILIO_PHONE_NUMBER = '+15075287908'; // Replace with your Twilio number
  const EMERGENCY_CONTACT = '+917017277081'; // Replace with a valid emergency contact

  const [location, setLocation] = useState(null);
  const [username, setUsername] = useState(''); // Store username
  const [codeword, setCodeword] = useState(''); // Store codeword
  const [loading, setLoading] = useState(true); // To track loading state
  const [isOptionSelected, setIsOptionSelected] = useState([false, false, false, false]); // Track selected options
  const [isVibrationEnabled, setIsVibrationEnabled] = useState(false); // Track vibration toggle state

  useEffect(() => {
    // Retrieve the username and codeword from AsyncStorage
    const fetchData = async () => {
      try {
        const savedName = await AsyncStorage.getItem('username'); // Retrieve from AsyncStorage
        const savedCodeword = await AsyncStorage.getItem('codeword'); // Retrieve codeword

        if (savedName) {
          setUsername(savedName); // Set the username if available
        } else {
          setUsername('Guest'); // Default value if no username found
        }

        if (savedCodeword) {
          setCodeword(savedCodeword); // Set the codeword if available
        } else {
          setCodeword('No codeword set'); // Default if no codeword found
        }
      } catch (error) {
        console.error('Error retrieving data:', error);
        setUsername('Guest'); // Default value in case of error
        setCodeword('No codeword set'); // Default codeword
      }
      setLoading(false); // Stop loading after fetching the data
    };

    fetchData();
  }, []); // Run only once when the component mounts

  useEffect(() => {
    // Request location permission and fetch location
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Denied', 'Location permissions are required for this app to function.');
        return;
      }

      let loc = await Location.getCurrentPositionAsync({});
      setLocation(loc.coords);
    })();
  }, []);

  const sendEmergencyAlert = async () => {
    if (!location) {
      Alert.alert('Error', 'Location is not available.');
      return;
    }

    const smsUrl = https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Messages.json;
    const callUrl = 'http://demo.twilio.com/docs/voice.xml';
    const smsData = new URLSearchParams({
      From: TWILIO_PHONE_NUMBER,
      To: EMERGENCY_CONTACT,
      Body: Help! I am in danger!\nLocation: ${location.latitude}, ${location.longitude}\nGoogle Maps Link: https://www.google.com/maps?q=${location.latitude},${location.longitude},
    });

    const auth = btoa(${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN});

    try {
      // Send SMS
      const smsResponse = await fetch(smsUrl, {
        method: 'POST',
        body: smsData,
        headers: {
          Authorization: Basic ${auth},
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });

      const smsResult = await smsResponse.json();
      if (!smsResponse.ok) throw new Error(smsResult.message);

      // Make a call
      const callData = new URLSearchParams({
        From: TWILIO_PHONE_NUMBER,
        To: EMERGENCY_CONTACT,
        Url: callUrl,
      });

      const callResponse = await fetch(
        https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Calls.json,
        {
          method: 'POST',
          body: callData,
          headers: {
            Authorization: Basic ${auth},
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        }
      );

      const callResult = await callResponse.json();
      if (!callResponse.ok) throw new Error(callResult.message);

      Alert.alert('Alert Sent', 'Emergency message and call sent successfully!');
    } catch (error) {
      Alert.alert('Error', Failed to send emergency alert: ${error.message});
    }
  };

  const triggerHelpMeAlert = () => {
    Alert.alert('Code Word Detected', 'Sending emergency alert...');
    sendEmergencyAlert();

    // Trigger vibration if enabled
    if (isVibrationEnabled) {
      Vibration.vibrate([500, 500, 500]); // Vibrate for 500ms, pause for 500ms, repeat for 500ms
    }
  };

  const toggleOption = (index) => {
    const updatedOptions = [...isOptionSelected];
    updatedOptions[index] = !updatedOptions[index]; // Toggle the selected state of the option
    setIsOptionSelected(updatedOptions);
  };

  const toggleVibration = () => {
    setIsVibrationEnabled((prevState) => {
      const newState = !prevState;
      return newState;  // Toggle the vibration state
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={styles.header}>
        <Text style={styles.username}>
          {loading ? 'Loading...' : Welcome, ${username}}
        </Text>
        <Text style={styles.codeword}>
          {loading ? 'Loading codeword...' : Codeword: ${codeword}}
        </Text>
      </View>
      <TouchableOpacity
        style={styles.sosButton}
        onPress={triggerHelpMeAlert}
        activeOpacity={0.7}
      >
        <Text style={styles.sosButtonText}>SOS</Text>
      </TouchableOpacity>
      <Text style={styles.description}>
        In case of emergency, press the SOS button to send a distress message and call your emergency contact with your current location.
      </Text>
      <Text style={styles.location}>
        {location ? Current Location: ${location.latitude}, ${location.longitude} : 'Fetching location...'}
      </Text>

      <View style={styles.footer}>
        <Text style={styles.footerTitle}>Important Steps for Protection</Text>
        <Text style={styles.footerText}>1. Always inform a trusted person about your plans.</Text>
        <Text style={styles.footerText}>2. Avoid isolated areas, especially at night.</Text>
        <Text style={styles.footerText}>3. Keep your phone fully charged and have emergency contacts readily accessible.</Text>
        <Text style={styles.footerText}>4. Use location-sharing features to alert friends or family of your whereabouts.</Text>
        <Text style={styles.footerText}>5. Stay vigilant and be aware of your surroundings at all times.</Text>
      </View>

      {/* Toggle Options Buttons */}
      <View style={styles.toggleOptionsContainer}>
        {['Vibration', 'Option 2', 'Option 3', 'Option 4'].map((label, index) => (
          <TouchableOpacity
            key={index}
            style={[
              styles.optionButton,
              index === 0 && isVibrationEnabled && styles.optionButtonSelected, // Only apply selected style to the vibration toggle
              isOptionSelected[index] && index !== 0 && styles.optionButtonSelected // For other options
            ]}
            onPress={() => {
              if (index === 0) {
                toggleVibration(); // Toggle vibration state for the first button
              } else {
                toggleOption(index); // Toggle other options
              }
            }}
          >
            <Text style={styles.optionButtonText}>{label}</Text>
          </TouchableOpacity>
        ))}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    padding: 20,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    margin: 10,
    paddingBottom: 40, // Extra padding at the bottom to prevent footer overlap
  },
  header: {
    width: '100%',
    alignItems: 'center', // Centering header content
    marginBottom: 20,
  },
  username: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#555',
  },
  codeword: {
    fontSize: 18,
    fontWeight: 'normal',
    color: '#777',
    marginTop: 10,
  },
  sosButton: {
    width: 180,
    height: 180,
    borderRadius: 90,
    backgroundColor: '#e91e63',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#e91e63',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.5,
    shadowRadius: 15,
  },
  sosButtonText: {
    fontSize: 20,
    color: '#fff',
  },
  description: {
    textAlign: 'center',
    marginHorizontal: 20,
    marginBottom: 20,
    fontSize: 16,
    color: 'gray',
  },
  location: {
    fontSize: 16,
    color: 'gray',
    marginBottom: 20,
  },
  footer: {
    marginTop: 40,
    alignItems: 'flex-start', // Left-aligning the steps
    marginBottom: 20,
  },
  footerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  footerText: {
    fontSize: 16,
    color: 'gray',
    textAlign: 'left', // Left-aligning the text
    marginBottom: 8,
  },
  toggleOptionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: 20,
    marginBottom: 20,
  },
  optionButton: {
    width: 70,
    height: 70,
    borderRadius: 20,
    backgroundColor: 'rgb(221, 93, 135)',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 10,
  },
  optionButtonSelected: {
    backgroundColor: 'rgb(179, 18, 77)', // A slightly darker shade for selected option
  },
  optionButtonText: {
    fontSize: 14,
    color: '#fff',
    textAlign: 'center',
  },
});

export default VoiceRecognitionScreen;



const TWILIO_ACCOUNT_SID = 'ACf00fbc73f79d55eba225dc40d14abd3e'; 
const TWILIO_AUTH_TOKEN = '7ee0e70afd067ccce8709d62680e26c2'; 
const TWILIO_PHONE_NUMBER = '+14067197660'; 
const EMERGENCY_CONTACT = '+919455605482'; 
